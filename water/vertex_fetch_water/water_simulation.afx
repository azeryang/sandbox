
technique [
    name = "water_simulation"
    ps_main="ps_main"
    vs_main="vs_main"
    class_name="WaterSimulationEffect"
           ];

[uniform_func="SetPrevHeight"] uniform Texture2D prevtex;
[uniform_func="SetCurrHeight"] uniform Texture2D currtex;
[uniform_func="SetDampenTex"] uniform Texture2D dampentex;
[uniform_func="SetWaterSize"] uniform vec4 water_size;
[uniform_func="SetWaveSpeed"] uniform vec4 speed;
[uniform_func="SetSampleUnit"] uniform vec2 unit;
[uniform_func="SetPositionWeight"] uniform vec4 posweight;
[uniform_func="SetDeltaTime"] uniform vec4 deltatime;

exchange struct VsOutput {
  [semantic="position" system="true"]
  vec4 position;
  vec2 texcoord0;
};

exchange struct VSInput {
  vec4 position;
  vec2 texcoord0;
};

VsOutput vs_main(VSInput input) {
  VsOutput o;
  o.position = input.position;
  o.texcoord0 = input.texcoord0;
  return o;
}

[system="true" semantic="target"]
vec4 ps_main(VsOutput o) {
  float h_x1y1 = sample2D(currtex, o.texcoord0).x;
  float h_x0y1 = sample2D(currtex, o.texcoord0 + (unit * vec2(-1.0f,  0.0f))).x;
  float h_x2y1 = sample2D(currtex, o.texcoord0 + (unit * vec2( 1.0f,  0.0f))).x;
  float h_x1y0 = sample2D(currtex, o.texcoord0 + (unit * vec2( 0.0f, -1.0f))).x;
  float h_x1y2 = sample2D(currtex, o.texcoord0 + (unit * vec2( 0.0f,  1.0f))).x;
  float prev_height = sample2D(prevtex, o.texcoord0);
  float dampening = sample2D(dampentex, o.texcoord0).x;
  float acceleration = dampening * speed.y * (
      h_x0y1 + h_x2y1 + h_x1y0 + h_x1y2 - 4.0f * h_x1y1);
  float new_height = posweight.x * h_x1y1 -
      posweight.y * prev_height +
      acceleration * deltatime.x;

  // calc normal
  vec3 dydx = vec3(water_size.x, h_x2y1 - h_x1y1, 0.0f);
  vec3 dydz = vec3(0.0f, h_x1y2 - h_x1y1, -water_size.z);
  vec3 normal = normalize(cross(dydx, dydz));

  vec4 ret = vec4(new_height, normal);
  return sample2D(currtex, o.texcoord0);
}


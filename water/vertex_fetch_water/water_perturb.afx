
technique [
    name = "water_perturb"
    ps_main="ps_main"
    vs_main="vs_main"
    class_name="WaterPerturbEffect"
           ];

[uniform_func="SetPerturbTex"] uniform Texture2D perturbtex;
[uniform_func="SetPosition"] uniform vec4 pos;
[uniform_func="SetDeltaPos"] uniform vec4 deltapos;
[uniform_func="SetDeltaTime"] uniform float deltatime;

exchange struct VsOutput {
  [semantic="position" system="true"]
  vec4 position;
  vec2 texcoord0;
};

exchange struct VSInput {
  vec4 position;
  vec2 texcoord0;
};

VsOutput vs_main(VSInput input) {
  VsOutput o;
  o.position = input.position;
  if (input.position.x < 0.1 && input.position.y > 0.9) {
    o.position = vec4(pos.x - deltapos.x - deltapos.y,
                      pos.y - deltapos.z - deltapos.w, 0.0f, 1.0f);
  } else if (input.position.x < 0.1 && input.position.y < 0.1) {
    o.position = vec4(pos.x + deltapos.x - deltapos.y,
                      pos.y + deltapos.z - deltapos.w, 0.0f, 1.0f);
  } else if (input.position.x > 0.9 && input.position.y < 0.1) {
    o.position = vec4(pos.x + deltapos.x + deltapos.y,
                      pos.y + deltapos.z + deltapos.w, 0.0f, 1.0f);
  } else if (input.position.x > 0.9 && input.position.y > 0.9) {
    o.position = vec4(pos.x - deltapos.x + deltapos.y,
                      pos.y - deltapos.z + deltapos.w, 0.0f, 1.0f);
  } 
  
  o.texcoord0 = input.texcoord0;
  return o;
}

[system="true" semantic="target"]
vec4 ps_main(VsOutput o) {
  vec4 ret = (sample2D(perturbtex, o.texcoord0) - 0.5f);
  // vec4 ret = (sample2D(perturbtex, o.texcoord0) - 0.5f) * deltatime;
  return ret;
}

